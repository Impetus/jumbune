"use strict";
var wrCalendarHeatmap = {
  settings: {
    gutter: 5,
    item_gutter: 1,
    width: 1e3,
    height: 200,
    item_size: 10,
    label_padding: 40,
    max_block_height: 20,
    transition_duration: 500,
    tooltip_width: 250,
    tooltip_padding: 15
  },
  init: function(a, t, e, n, r) {
    (wrCalendarHeatmap.data = a),
      (wrCalendarHeatmap.container = t),
      (wrCalendarHeatmap.color = e),
      (wrCalendarHeatmap.overview = n || "year"),
      (wrCalendarHeatmap.history = ["year"]),
      (wrCalendarHeatmap.selected = {}),
      (wrCalendarHeatmap.handler = r),
      (wrCalendarHeatmap.in_transition = !1),
      wrCalendarHeatmap.createElements(),
      wrCalendarHeatmap.parseData(),
      wrCalendarHeatmap.drawChart();
  },
  createElements: function() {
    if (null != wrCalendarHeatmap.container) {
      var a = document.getElementById(wrCalendarHeatmap.container);
      if (!a || "DIV" != a.tagName)
        throw "Element not found or not of type div";
      a.classList.contains("calendar-heatmap") ||
        a.classList.add("calendar-heatmap");
    } else {
      var a = document.createElement("div");
      (a.className = "calendar-heatmap"), document.body.appendChild(a);
    }
    var t = d3
      .select(a)
      .append("svg")
      .attr("class", "svg");
    (wrCalendarHeatmap.items = t.append("g")),
      (wrCalendarHeatmap.labels = t.append("g")),
      (wrCalendarHeatmap.buttons = t.append("g")),
      (wrCalendarHeatmap.tooltip = d3
        .select(a)
        .append("div")
        .attr("class", "heatmap-tooltip")
        .style("opacity", 0));
    var e = function() {
      var e = Math.round(
          (moment() -
            moment()
              .subtract(1, "year")
              .startOf("week")) /
            864e5
        ),
        n = Math.trunc(e / 7),
        r = n + 1;
      (wrCalendarHeatmap.settings.width =
        a.offsetWidth < 1e3 ? 1e3 : a.offsetWidth),
        (wrCalendarHeatmap.settings.item_size =
          (wrCalendarHeatmap.settings.width -
            wrCalendarHeatmap.settings.label_padding) /
            r -
          wrCalendarHeatmap.settings.gutter),
        (wrCalendarHeatmap.settings.height =
          wrCalendarHeatmap.settings.label_padding +
          7 *
            (wrCalendarHeatmap.settings.item_size +
              wrCalendarHeatmap.settings.gutter)),
        t
          .attr("width", wrCalendarHeatmap.settings.width)
          .attr("height", wrCalendarHeatmap.settings.height),
        wrCalendarHeatmap.data &&
          wrCalendarHeatmap.data[0].summary &&
          wrCalendarHeatmap.drawChart();
    };
    e(),
      (window.onresize = function(a) {
        e();
      });
	},
	
	parseData: function() {
    wrCalendarHeatmap.data &&
      (wrCalendarHeatmap.data[0].summary ||
        wrCalendarHeatmap.data.map(function(a) {
          var t = a.details.reduce(function(a, t) {
              return (
                a[t.name] (a[t.name] = { recommendation: t.recommendation }),
                a
              );
            }, {}),
            e = Object.keys(t).map(function(a) {
              return { name: a, recommendation: t[a].recommendation };
            });
          return (
            (a.summary = e.sort(function(a, t) {
              return t.recommendation - a.recommendation;
            })),
            a
          );
        }));
  },
  drawChart: function() {
  	if("year" === wrCalendarHeatmap.overview)
      wrCalendarHeatmap.drawYearOverview();
	},
	colormapper: function(recommendation){
		var num;
		if(recommendation == "NONE"){
			num = 0;
		}else if(recommendation == "CPU"){
			num = 100;
		}else if(recommendation == "MEMORY"){
			num = 1000;
		}else if(recommendation == "ANY"){
			num = 10000;
		}
		return num;
	},
  drawYearOverview: function() {
    wrCalendarHeatmap.history[wrCalendarHeatmap.history.length - 1] !==
      wrCalendarHeatmap.overview &&
      wrCalendarHeatmap.history.push(wrCalendarHeatmap.overview);
    var a = moment(wrCalendarHeatmap.selected.date).startOf("year"),
      t = moment(wrCalendarHeatmap.selected.date).endOf("year"),
      e = wrCalendarHeatmap.data.filter(function(e) {
        return a <= moment(e.date) && moment(e.date) < t;
      }),
      n = d3.max(e, (a)=> {
        return this.colormapper(a.recommendation);
      }),
      r = d3
        .scaleLinear()
        .range(["#ffffff", wrCalendarHeatmap.color || "#bf0"])
        .domain([-0.15 * n, n]),
      i = function(t) {
        var e = moment(t.date),
          n = Math.round((e - moment(a).startOf("week")) / 864e5),
          r = Math.trunc(n / 7);
        return (
          r *
            (wrCalendarHeatmap.settings.item_size +
              wrCalendarHeatmap.settings.gutter) +
          wrCalendarHeatmap.settings.label_padding
        );
      },
      l = function(a) {
        return (
          wrCalendarHeatmap.settings.label_padding +
          moment(a.date).weekday() *
            (wrCalendarHeatmap.settings.item_size +
              wrCalendarHeatmap.settings.gutter)
        );
      },
      d = function(a) {
        return n <= 0
          ? wrCalendarHeatmap.settings.item_size
          : wrCalendarHeatmap.settings.item_size;
			};		
    wrCalendarHeatmap.items.selectAll(".item-circle").remove(),
      wrCalendarHeatmap.items
        .selectAll(".item-circle")
        .data(e)
        .enter()
        .append("rect")
        .attr("class", "item item-circle")
        .style("opacity", 0)
        .attr("x", function(a) {
          return i(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
        })
        .attr("y", function(a) {
          return l(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
        })
        .attr("rx", function(a) {
          return d(a);
        })
        .attr("ry", function(a) {
          return d(a);
        })
        .attr("width", function(a) {
          return d(a);
        })
        .attr("height", function(a) {
          return d(a);
				})
				// r(this.colormapper(a.recommendation)) 
        .attr("fill", (a)=> {
					var color = a.recommendation == "NONE" ? "#ddd": a.recommendation == "ANY" ? "#00e5ff" : a.recommendation == "MEMORY" ? "#00f769" : a.recommendation == "CPU" ? "#cb3" : "#f44336" ;
          return color;
        })
        .on("click", function(a) {})
        .on("mouseover", function(a) {
          if (!wrCalendarHeatmap.in_transition) {
            var t = d3.select(this);
            !(function s() {
              t = t
                .transition()
                .duration(wrCalendarHeatmap.settings.transition_duration)
                .ease(d3.easeLinear)
                .attr("x", function(a) {
                  return (
                    i(a) -
                    (1.1 * wrCalendarHeatmap.settings.item_size -
                      wrCalendarHeatmap.settings.item_size) /
                      2
                  );
                })
                .attr("y", function(a) {
                  return (
                    l(a) -
                    (1.1 * wrCalendarHeatmap.settings.item_size -
                      wrCalendarHeatmap.settings.item_size) /
                      2
                  );
                })
                .attr("width", 1.1 * wrCalendarHeatmap.settings.item_size)
                .attr("height", 1.1 * wrCalendarHeatmap.settings.item_size)
                .transition()
                .duration(wrCalendarHeatmap.settings.transition_duration)
                .ease(d3.easeLinear)
                .attr("x", function(a) {
                  return i(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
                })
                .attr("y", function(a) {
                  return l(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
                })
                .attr("width", function(a) {
                  return d(a);
                })
                .attr("height", function(a) {
                  return d(a);
                })
                .on("end", s);
            })();
            var e = "";
            (e +=
              '<div class="header"><strong>' +
              (a.recommendation ? a.recommendation : "No") +
              " recommendation</strong></div>"),
              (e +=
                "<div>on " +
                moment(a.date).format("dddd, MMM Do YYYY") +
                "</div><br>");
            for (var n = 0; n < 1; n++)
              (e +=
                "<div><span><strong>" + a.recommendation + "</strong> workload suited</span></div>");
            var r = i(a) + wrCalendarHeatmap.settings.item_size;
            wrCalendarHeatmap.settings.width - r <
              wrCalendarHeatmap.settings.tooltip_width +
                3 * wrCalendarHeatmap.settings.tooltip_padding &&
              (r -=
                wrCalendarHeatmap.settings.tooltip_width +
                2 * wrCalendarHeatmap.settings.tooltip_padding);
            var o =
              this.getBoundingClientRect().top +
              wrCalendarHeatmap.settings.item_size;
            wrCalendarHeatmap.tooltip
              .html(e)
              .style("left", r + "px")
              .style("top", o + (-180) +  "px")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration / 2)
              .ease(d3.easeLinear)
              .style("opacity", 1);
          }
        })
        .on("mouseout", function() {
          wrCalendarHeatmap.in_transition ||
            (d3
              .select(this)
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration / 2)
              .ease(d3.easeLinear)
              .attr("x", function(a) {
                return i(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
              })
              .attr("y", function(a) {
                return l(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
              })
              .attr("width", function(a) {
                return d(a);
              })
              .attr("height", function(a) {
                return d(a);
              }),
            wrCalendarHeatmap.hideTooltip());
        })
        .transition()
        .delay(function() {
          return (
            (Math.cos(Math.PI * Math.random()) + 1) *
            wrCalendarHeatmap.settings.transition_duration
          );
        })
        .duration(function() {
          return wrCalendarHeatmap.settings.transition_duration;
        })
        .ease(d3.easeLinear)
        .style("opacity", 1)
        .call(
          function(a, t) {
            a.empty() && t();
            var e = 0;
            a.each(function() {
              ++e;
            }).on("end", function() {
              --e || t.apply(this, arguments);
            });
          },
          function() {
            wrCalendarHeatmap.in_transition = !1;
          }
        );
    var o = d3.timeMonths(a, t),
      s = d3
        .scaleLinear()
        .range([0, wrCalendarHeatmap.settings.width])
        .domain([0, o.length]);
    wrCalendarHeatmap.labels.selectAll(".label-month").remove(),
      wrCalendarHeatmap.labels
        .selectAll(".label-month")
        .data(o)
        .enter()
        .append("text")
        .attr("class", "label label-month")
        .attr("font-size", function() {
          return Math.floor(wrCalendarHeatmap.settings.label_padding / 3) + "px";
        })
        .text(function(a) {
          return a.toLocaleDateString("en-us", { month: "short" });
        })
        .attr("x", function(a, t) {
          return s(t) + (s(t) - s(t - 1)) / 2;
        })
        .attr("y", wrCalendarHeatmap.settings.label_padding / 2)
        .on("mouseenter", function(a) {
          if (!wrCalendarHeatmap.in_transition) {
            var t = moment(a);
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", function(a) {
                return moment(a.date).isSame(t, "month") ? 1 : 0.1;
              });
          }
        })
        .on("mouseout", function() {
          wrCalendarHeatmap.in_transition ||
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", 1);
        })
        .on("click", function(a) { });
    var c = d3.timeDays(moment().startOf("week"), moment().endOf("week")),
      m = d3
        .scaleBand()
        .rangeRound([
          wrCalendarHeatmap.settings.label_padding,
          wrCalendarHeatmap.settings.height
        ])
        .domain(
          c.map(function(a) {
            return moment(a).weekday();
          })
        );
    wrCalendarHeatmap.labels.selectAll(".label-day").remove(),
      wrCalendarHeatmap.labels
        .selectAll(".label-day")
        .data(c)
        .enter()
        .append("text")
        .attr("class", "label label-day")
        .attr("x", wrCalendarHeatmap.settings.label_padding / 3)
        .attr("y", function(a, t) {
          return m(t) + m.bandwidth() / 1.75;
        })
        .style("text-anchor", "left")
        .attr("font-size", function() {
          return Math.floor(wrCalendarHeatmap.settings.label_padding / 3) + "px";
        })
        .text(function(a) {
          return moment(a).format("dddd")[0];
        })
        .on("mouseenter", function(a) {
          if (!wrCalendarHeatmap.in_transition) {
            var t = moment(a);
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", function(a) {
                return moment(a.date).day() === t.day() ? 1 : 0.1;
              });
          }
        })
        .on("mouseout", function() {
          wrCalendarHeatmap.in_transition ||
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", 1);
        })
      //wrCalendarHeatmap.drawButton();
  },
  drawButton: function() {
    wrCalendarHeatmap.buttons.selectAll(".button").remove();
    var a = wrCalendarHeatmap.buttons
      .append("g")
      .attr("class", "button button-back")
      .style("opacity", 0)
      .on("click", function() {
        wrCalendarHeatmap.in_transition ||
          ((wrCalendarHeatmap.in_transition = !0),
          "year" === wrCalendarHeatmap.overview
            ? wrCalendarHeatmap.removeYearOverview()
            : "month" === wrCalendarHeatmap.overview &&
              wrCalendarHeatmap.removeMonthOverview(),
          wrCalendarHeatmap.history.pop(),
          (wrCalendarHeatmap.overview = wrCalendarHeatmap.history.pop()),
          wrCalendarHeatmap.drawChart());
      });
    a
      .append("circle")
      .attr("cx", wrCalendarHeatmap.settings.label_padding / 2.25)
      .attr("cy", wrCalendarHeatmap.settings.label_padding / 2.5)
      .attr("r", wrCalendarHeatmap.settings.item_size / 2),
      a
        .append("text")
        .attr("x", wrCalendarHeatmap.settings.label_padding / 2.25)
        .attr("y", wrCalendarHeatmap.settings.label_padding / 2.5)
        .attr("dy", function() {
          return Math.floor(wrCalendarHeatmap.settings.width / 100) / 3;
        })
        .attr("font-size", function() {
          return Math.floor(wrCalendarHeatmap.settings.label_padding / 3) + "px";
        })
        .html("&#x2190;"),
      a
        .transition()
        .duration(wrCalendarHeatmap.settings.transition_duration)
        .ease(d3.easeLinear)
        .style("opacity", 1);
  },
  removeYearOverview: function() {
    wrCalendarHeatmap.items
      .selectAll(".item-circle")
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration)
      .ease(d3.easeLinear)
      .style("opacity", 0)
      .remove(),
      wrCalendarHeatmap.labels.selectAll(".label-day").remove(),
      wrCalendarHeatmap.labels.selectAll(".label-month").remove(),
      wrCalendarHeatmap.hideBackButton();
  },
  removeMonthOverview: function() {
    wrCalendarHeatmap.items
      .selectAll(".item-block-month")
      .selectAll(".item-block-rect")
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration)
      .ease(d3.easeLinear)
      .style("opacity", 0)
      .attr("x", function(a, t) {
        return t % 2 === 0
          ? -wrCalendarHeatmap.settings.width / 3
          : wrCalendarHeatmap.settings.width / 3;
      })
      .remove(),
      wrCalendarHeatmap.labels.selectAll(".label-day").remove(),
      wrCalendarHeatmap.labels.selectAll(".label-week").remove(),
      wrCalendarHeatmap.hideBackButton();
  },
  hideTooltip: function() {
    wrCalendarHeatmap.tooltip
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration / 2)
      .ease(d3.easeLinear)
      .style("opacity", 0);
  },
  hideBackButton: function() {
    wrCalendarHeatmap.buttons
      .selectAll(".button")
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration)
      .ease(d3.easeLinear)
      .style("opacity", 0)
      .remove();
  },
  formatTime: function(a) {
    var t = Math.floor(a / 3600),
      e = Math.floor((a - 3600 * t) / 60),
      n = "";
    return (
      t > 0 && (n += 1 === t ? "1 hour " : t + " hours "),
      e > 0 && (n += 1 === e ? "1 minute" : e + " minutes"),
      0 === t && 0 === e && (n = Math.round(a) + " seconds"),
      n
    );
  }
};
("use strict");
var wrCalendarHeatmap = {
  settings: {
    gutter: 5,
    item_gutter: 1,
    width: 1e3,
    height: 200,
    item_size: 10,
    label_padding: 40,
    max_block_height: 20,
    transition_duration: 500,
    tooltip_width: 250,
    tooltip_padding: 15
  },
  init: function(a, t, e, n, r) {
    (wrCalendarHeatmap.data = a),
      (wrCalendarHeatmap.container = t),
      (wrCalendarHeatmap.color = e  || "#00e5ff"),
      (wrCalendarHeatmap.overview = n || "year"),
      (wrCalendarHeatmap.history = ["year"]),
      (wrCalendarHeatmap.selected = {}),
      (wrCalendarHeatmap.handler = r),
      (wrCalendarHeatmap.in_transition = !1),
      wrCalendarHeatmap.createElements(),
      wrCalendarHeatmap.parseData(),
      wrCalendarHeatmap.drawChart();
  },
  createElements: function() {
    if (null != wrCalendarHeatmap.container) {
      var a = document.getElementById(wrCalendarHeatmap.container);
      if (!a || "DIV" != a.tagName)
        throw "Element not found or not of type div";
      a.classList.contains("calendar-heatmap") ||
        a.classList.add("calendar-heatmap");
    } else {
      var a = document.createElement("div");
      (a.className = "calendar-heatmap"), document.body.appendChild(a);
    }
    var t = d3
      .select(a)
      .append("svg")
      .attr("class", "svg");
    (wrCalendarHeatmap.items = t.append("g")),
      (wrCalendarHeatmap.labels = t.append("g")),
      (wrCalendarHeatmap.buttons = t.append("g")),
      (wrCalendarHeatmap.tooltip = d3
        .select(a)
        .append("div")
        .attr("class", "heatmap-tooltip")
        .style("opacity", 0));
    var e = function() {
      var e = Math.round(
          (moment() -
            moment()
              .subtract(1, "year")
              .startOf("week")) /
            864e5
        ),
        n = Math.trunc(e / 7),
        r = n + 1;
      (wrCalendarHeatmap.settings.width =
        a.offsetWidth < 1e3 ? 1e3 : a.offsetWidth),
        (wrCalendarHeatmap.settings.item_size =
          (wrCalendarHeatmap.settings.width -
            wrCalendarHeatmap.settings.label_padding) /
            r -
          wrCalendarHeatmap.settings.gutter),
        (wrCalendarHeatmap.settings.height =
          wrCalendarHeatmap.settings.label_padding +
          7 *
            (wrCalendarHeatmap.settings.item_size +
              wrCalendarHeatmap.settings.gutter)),
        t
          .attr("width", wrCalendarHeatmap.settings.width)
          .attr("height", wrCalendarHeatmap.settings.height),
        wrCalendarHeatmap.data &&
          wrCalendarHeatmap.data[0].summary &&
          wrCalendarHeatmap.drawChart();
    };
    e(),
      (window.onresize = function(a) {
        e();
      });
  },
  parseData: function() {
    wrCalendarHeatmap.data &&
      (wrCalendarHeatmap.data[0].summary ||
        wrCalendarHeatmap.data.map(function(a) {
          var t = a.details.reduce(function(a, t) {
              return (
                a[t.name] (a[t.name] = { recommendation: t.recommendation }),
                a
              );
            }, {}),
            e = Object.keys(t).map(function(a) {
              return { name: a, recommendation: t[a].recommendation };
            });
        }));
  },
  drawChart: function() {
  		if ("year" === wrCalendarHeatmap.overview)
       wrCalendarHeatmap.drawYearOverview();
  },
  drawYearOverview: function() {
    wrCalendarHeatmap.history[wrCalendarHeatmap.history.length - 1] !==
      wrCalendarHeatmap.overview &&
      wrCalendarHeatmap.history.push(wrCalendarHeatmap.overview);
    var a = moment(wrCalendarHeatmap.selected.date).startOf("year"),
      t = moment(wrCalendarHeatmap.selected.date).endOf("year"),
      e = wrCalendarHeatmap.data.filter(function(e) {
        return a <= moment(e.date) && moment(e.date) < t;
      }),
      n = d3.max(e, function(a) {
        return 10000;
      }),
      r = d3
        .scaleLinear()
        .range(["#ffffff", wrCalendarHeatmap.color || "#114500"])
        .domain([-0.15 * n, n]),
      i = function(t) {
        var e = moment(t.date),
          n = Math.round((e - moment(a).startOf("week")) / 864e5),
          r = Math.trunc(n / 7);
        return (
          r *
            (wrCalendarHeatmap.settings.item_size +
              wrCalendarHeatmap.settings.gutter) +
          wrCalendarHeatmap.settings.label_padding
        );
      },
      l = function(a) {
        return (
          wrCalendarHeatmap.settings.label_padding +
          moment(a.date).weekday() *
            (wrCalendarHeatmap.settings.item_size +
              wrCalendarHeatmap.settings.gutter)
        );
			},
		 colormapper = function(recommendation){
			var num;
			if(recommendation == "NONE"){
				num = 0;
			}else if(recommendation == "CPU"){
				num = 99999;
			}else if(recommendation == "MEMORY"){
				num = 4444;
			}else if(recommendation == "ANY"){
				num = 10;
			}
			return num;
			},
      d = function(a) {
        return n <= 0
          ? wrCalendarHeatmap.settings.item_size
          : wrCalendarHeatmap.settings.item_size;
      };
    wrCalendarHeatmap.items.selectAll(".item-circle").remove(),
      wrCalendarHeatmap.items
        .selectAll(".item-circle")
        .data(e)
        .enter()
        .append("rect")
        .attr("class", "item item-circle")
        .style("opacity", 0)
        .attr("x", function(a) {
          return i(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
        })
        .attr("y", function(a) {
          return l(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
        })
        .attr("rx", function(a) {
          return d(a);
        })
        .attr("ry", function(a) {
          return d(a);
        })
        .attr("width", function(a) {
          return d(a);
        })
        .attr("height", function(a) {
          return d(a);
        })
        .attr("fill", function(a) {
					var color = a.recommendation == "NONE" ? "#ddd": a.recommendation == "ANY" ? "#00c853" : a.recommendation == "MEMORY" ? "#0091ea" : a.recommendation == "CPU" ? "#ffd600" : "#f44336" ;
          return color;
        })
        .on("click", function(a) {})
        .on("mouseover", function(a) {
          if (!wrCalendarHeatmap.in_transition) {
            var t = d3.select(this);
            !(function s() {
              t = t
                .transition()
                .duration(wrCalendarHeatmap.settings.transition_duration)
                .ease(d3.easeLinear)
                .attr("x", function(a) {
                  return (
                    i(a) -
                    (1.1 * wrCalendarHeatmap.settings.item_size -
                      wrCalendarHeatmap.settings.item_size) /
                      2
                  );
                })
                .attr("y", function(a) {
                  return (
                    l(a) -
                    (1.1 * wrCalendarHeatmap.settings.item_size -
                      wrCalendarHeatmap.settings.item_size) /
                      2
                  );
                })
                .attr("width", 1.1 * wrCalendarHeatmap.settings.item_size)
                .attr("height", 1.1 * wrCalendarHeatmap.settings.item_size)
                .transition()
                .duration(wrCalendarHeatmap.settings.transition_duration)
                .ease(d3.easeLinear)
                .attr("x", function(a) {
                  return i(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
                })
                .attr("y", function(a) {
                  return l(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
                })
                .attr("width", function(a) {
                  return d(a);
                })
                .attr("height", function(a) {
                  return d(a);
                })
                .on("end", s);
            })();
            var e = "";
            (e +=
              '<div class="header"><strong>' +
              (a.recommendation ? a.recommendation : "No") +
              " recommendation</strong></div>"),
              (e +=
                "<div>on " +
                moment(a.date).format("dddd, MMM Do YYYY") +
                "</div><br>");
            for (var n = 0; n < 1; n++)
              (e +=
                "<div><span><strong>"+
                (a.recommendation ? a.recommendation : "No") + "</strong> workload suited</span></div>");
            var r = i(a) + wrCalendarHeatmap.settings.item_size;
            wrCalendarHeatmap.settings.width - r <
              wrCalendarHeatmap.settings.tooltip_width +
                3 * wrCalendarHeatmap.settings.tooltip_padding &&
              (r -=
                wrCalendarHeatmap.settings.tooltip_width +
                2 * wrCalendarHeatmap.settings.tooltip_padding);
            var o =
              this.getBoundingClientRect().top +
              wrCalendarHeatmap.settings.item_size;
            wrCalendarHeatmap.tooltip
              .html(e)
              .style("left", r + "px")
              .style("top", o + (-180) + "px")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration / 2)
              .ease(d3.easeLinear)
              .style("opacity", 1);
          }
        })
        .on("mouseout", function() {
          wrCalendarHeatmap.in_transition ||
            (d3
              .select(this)
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration / 2)
              .ease(d3.easeLinear)
              .attr("x", function(a) {
                return i(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
              })
              .attr("y", function(a) {
                return l(a) + (wrCalendarHeatmap.settings.item_size - d(a)) / 2;
              })
              .attr("width", function(a) {
                return d(a);
              })
              .attr("height", function(a) {
                return d(a);
              }),
            wrCalendarHeatmap.hideTooltip());
        })
        .transition()
        .delay(function() {
          return (
            (Math.cos(Math.PI * Math.random()) + 1) *
            wrCalendarHeatmap.settings.transition_duration
          );
        })
        .duration(function() {
          return wrCalendarHeatmap.settings.transition_duration;
        })
        .ease(d3.easeLinear)
        .style("opacity", 1)
        .call(
          function(a, t) {
            a.empty() && t();
            var e = 0;
            a.each(function() {
              ++e;
            }).on("end", function() {
              --e || t.apply(this, arguments);
            });
          },
          function() {
            wrCalendarHeatmap.in_transition = !1;
          }
        );
    var o = d3.timeMonths(a, t),
      s = d3
        .scaleLinear()
        .range([0, wrCalendarHeatmap.settings.width])
        .domain([0, o.length]);
    wrCalendarHeatmap.labels.selectAll(".label-month").remove(),
      wrCalendarHeatmap.labels
        .selectAll(".label-month")
        .data(o)
        .enter()
        .append("text")
        .attr("class", "label label-month")
        .attr("font-size", function() {
          return Math.floor(wrCalendarHeatmap.settings.label_padding / 3) + "px";
        })
        .text(function(a) {
          return a.toLocaleDateString("en-us", { month: "short" });
        })
        .attr("x", function(a, t) {
          return s(t) + (s(t) - s(t - 1)) / 2;
        })
        .attr("y", wrCalendarHeatmap.settings.label_padding / 2)
        .on("mouseenter", function(a) {
          if (!wrCalendarHeatmap.in_transition) {
            var t = moment(a);
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", function(a) {
                return moment(a.date).isSame(t, "month") ? 1 : 0.1;
              });
          }
        })
        .on("mouseout", function() {
          wrCalendarHeatmap.in_transition ||
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", 1);
        })
        .on("click", function(a) { });
    var c = d3.timeDays(moment().startOf("week"), moment().endOf("week")),
      m = d3
        .scaleBand()
        .rangeRound([
          wrCalendarHeatmap.settings.label_padding,
          wrCalendarHeatmap.settings.height
        ])
        .domain(
          c.map(function(a) {
            return moment(a).weekday();
          })
        );
    wrCalendarHeatmap.labels.selectAll(".label-day").remove(),
      wrCalendarHeatmap.labels
        .selectAll(".label-day")
        .data(c)
        .enter()
        .append("text")
        .attr("class", "label label-day")
        .attr("x", wrCalendarHeatmap.settings.label_padding / 3)
        .attr("y", function(a, t) {
          return m(t) + m.bandwidth() / 1.75;
        })
        .style("text-anchor", "left")
        .attr("font-size", function() {
          return Math.floor(wrCalendarHeatmap.settings.label_padding / 3) + "px";
        })
        .text(function(a) {
          return moment(a).format("dddd")[0];
        })
        .on("mouseenter", function(a) {
          if (!wrCalendarHeatmap.in_transition) {
            var t = moment(a);
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", function(a) {
                return moment(a.date).day() === t.day() ? 1 : 0.1;
              });
          }
        })
        .on("mouseout", function() {
          wrCalendarHeatmap.in_transition ||
            wrCalendarHeatmap.items
              .selectAll(".item-circle")
              .transition()
              .duration(wrCalendarHeatmap.settings.transition_duration)
              .ease(d3.easeLinear)
              .style("opacity", 1);
        })
     // wrCalendarHeatmap.drawButton();
  },
  drawButton: function() {
    wrCalendarHeatmap.buttons.selectAll(".button").remove();
    var a = wrCalendarHeatmap.buttons
      .append("g")
      .attr("class", "button button-back")
      .style("opacity", 0)
      .on("click", function() {
        wrCalendarHeatmap.in_transition ||
          ((wrCalendarHeatmap.in_transition = !0),
          "year" === wrCalendarHeatmap.overview
            ? wrCalendarHeatmap.removeYearOverview()
            : "month" === wrCalendarHeatmap.overview &&
              wrCalendarHeatmap.removeMonthOverview(),
          wrCalendarHeatmap.history.pop(),
          (wrCalendarHeatmap.overview = wrCalendarHeatmap.history.pop()),
          wrCalendarHeatmap.drawChart());
      });
    a
      .append("circle")
      .attr("cx", wrCalendarHeatmap.settings.label_padding / 2.25)
      .attr("cy", wrCalendarHeatmap.settings.label_padding / 2.5)
      .attr("r", wrCalendarHeatmap.settings.item_size / 2),
      a
        .append("text")
        .attr("x", wrCalendarHeatmap.settings.label_padding / 2.25)
        .attr("y", wrCalendarHeatmap.settings.label_padding / 2.5)
        .attr("dy", function() {
          return Math.floor(wrCalendarHeatmap.settings.width / 100) / 3;
        })
        .attr("font-size", function() {
          return Math.floor(wrCalendarHeatmap.settings.label_padding / 3) + "px";
        })
        .html("&#x2190;"),
      a
        .transition()
        .duration(wrCalendarHeatmap.settings.transition_duration)
        .ease(d3.easeLinear)
        .style("opacity", 1);
  },
  removeYearOverview: function() {
    wrCalendarHeatmap.items
      .selectAll(".item-circle")
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration)
      .ease(d3.easeLinear)
      .style("opacity", 0)
      .remove(),
      wrCalendarHeatmap.labels.selectAll(".label-day").remove(),
      wrCalendarHeatmap.labels.selectAll(".label-month").remove(),
      wrCalendarHeatmap.hideBackButton();
  },
  removeMonthOverview: function() {
    wrCalendarHeatmap.items
      .selectAll(".item-block-month")
      .selectAll(".item-block-rect")
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration)
      .ease(d3.easeLinear)
      .style("opacity", 0)
      .attr("x", function(a, t) {
        return t % 2 === 0
          ? -wrCalendarHeatmap.settings.width / 3
          : wrCalendarHeatmap.settings.width / 3;
      })
      .remove(),
      wrCalendarHeatmap.labels.selectAll(".label-day").remove(),
      wrCalendarHeatmap.labels.selectAll(".label-week").remove(),
      wrCalendarHeatmap.hideBackButton();
  },
  hideTooltip: function() {
    wrCalendarHeatmap.tooltip
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration / 2)
      .ease(d3.easeLinear)
      .style("opacity", 0);
  },
  hideBackButton: function() {
    wrCalendarHeatmap.buttons
      .selectAll(".button")
      .transition()
      .duration(wrCalendarHeatmap.settings.transition_duration)
      .ease(d3.easeLinear)
      .style("opacity", 0)
      .remove();
  },
  formatTime: function(a) {
    var t = Math.floor(a / 3600),
      e = Math.floor((a - 3600 * t) / 60),
      n = "";
    return (
      t > 0 && (n += 1 === t ? "1 hour " : t + " hours "),
      e > 0 && (n += 1 === e ? "1 minute" : e + " minutes"),
      0 === t && 0 === e && (n = Math.round(a) + " seconds"),
      n
    );
  }
};

