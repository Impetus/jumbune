"use strict";
var calendarHeatmap = {
	settings: {
		gutter: 5,
		item_gutter: 1,
		width: 1e3,
		height: 200,
		item_size: 10,
		label_padding: 40,
		max_block_height: 20,
		transition_duration: 500,
		tooltip_width: 250,
		tooltip_padding: 15
	},
	init: function(a, t, e, n, r) {
		(calendarHeatmap.data = a),
			(calendarHeatmap.container = t),
			(calendarHeatmap.color = e || "#ff4500"),
			(calendarHeatmap.overview = n || "global"),
			(calendarHeatmap.history = ["global"]),
			(calendarHeatmap.selected = {}),
			(calendarHeatmap.handler = r),
			(calendarHeatmap.in_transition = !1),
			calendarHeatmap.createElements(),
			calendarHeatmap.parseData(),
			calendarHeatmap.drawChart();
	},
	createElements: function() {
		if (null != calendarHeatmap.container) {
			var a = document.getElementById(calendarHeatmap.container);
			if (!a || "DIV" != a.tagName)
				throw "Element not found or not of type div";
			a.classList.contains("calendar-heatmap") ||
				a.classList.add("calendar-heatmap");
		} else {
			var a = document.createElement("div");
			(a.className = "calendar-heatmap"), document.body.appendChild(a);
		}
		var t = d3
			.select(a)
			.append("svg")
			.attr("class", "svg");
		(calendarHeatmap.items = t.append("g")),
			(calendarHeatmap.labels = t.append("g")),
			(calendarHeatmap.buttons = t.append("g")),
			(calendarHeatmap.tooltip = d3
				.select(a)
				.append("div")
				.attr("class", "heatmap-tooltip")
				.style("opacity", 0));
		var e = function() {
			var e = Math.round(
					(moment() -
						moment()
							.subtract(1, "year")
							.startOf("week")) /
						864e5
				),
				n = Math.trunc(e / 7),
				r = n + 1;
			(calendarHeatmap.settings.width =
				a.offsetWidth < 1e3 ? 1e3 : a.offsetWidth),
				(calendarHeatmap.settings.item_size =
					(calendarHeatmap.settings.width -
						calendarHeatmap.settings.label_padding) /
						r -
					calendarHeatmap.settings.gutter),
				(calendarHeatmap.settings.height =
					calendarHeatmap.settings.label_padding +
					7 *
						(calendarHeatmap.settings.item_size +
							calendarHeatmap.settings.gutter)),
				t
					.attr("width", calendarHeatmap.settings.width)
					.attr("height", calendarHeatmap.settings.height),
				calendarHeatmap.data &&
					calendarHeatmap.data[0].summary &&
					calendarHeatmap.drawChart();
		};
		e(),
			(window.onresize = function(a) {
				e();
			});
	},
	parseData: function() {
		calendarHeatmap.data &&
			(calendarHeatmap.data[0].summary ||
				calendarHeatmap.data.map(function(a) {
					var t = a.details.reduce(function(a, t) {
							return (
								a[t.name]
									? (a[t.name].value += t.value)
									: (a[t.name] = { value: t.value }),
								a
							);
						}, {}),
						e = Object.keys(t).map(function(a) {
							return { name: a, value: t[a].value };
						});
					return (
						(a.summary = e.sort(function(a, t) {
							return t.value - a.value;
						})),
						a
					);
				}));
	},
	drawChart: function() {
		"global" === calendarHeatmap.overview
			? calendarHeatmap.drawGlobalOverview()
			: "year" === calendarHeatmap.overview
			? calendarHeatmap.drawYearOverview()
			: "month" === calendarHeatmap.overview &&
			  calendarHeatmap.drawMonthOverview();
	},
	drawGlobalOverview: function() {
		calendarHeatmap.history[calendarHeatmap.history.length - 1] !==
			calendarHeatmap.overview &&
			calendarHeatmap.history.push(calendarHeatmap.overview);
		var a = moment(calendarHeatmap.data[0].date).startOf("year"),
			t = moment(
				calendarHeatmap.data[calendarHeatmap.data.length - 1].date
			).endOf("year"),
			e = d3.timeYears(a, t).map(function(a) {
				var t = moment(a);
				return {
					date: t,
					total: calendarHeatmap.data.reduce(function(a, e) {
						return moment(e.date).year() === t.year() && (a += e.total), a;
					}, 0),
					summary: (function() {
						var a = calendarHeatmap.data.reduce(function(a, e) {
								if (moment(e.date).year() === t.year())
									for (var n = 0; n < e.summary.length; n++)
										a[e.summary[n].name]
											? (a[e.summary[n].name].value += e.summary[n].value)
											: (a[e.summary[n].name] = { value: e.summary[n].value });
								return a;
							}, {}),
							e = Object.keys(a).map(function(t) {
								return { name: t, value: a[t].value };
							});
						return e.sort(function(a, t) {
							return t.value - a.value;
						});
					})()
				};
			}),
			n = d3.max(e, function(a) {
				return a.total;
			}),
			r = d3.timeYears(a, t).map(function(a) {
				return moment(a);
			}),
			i = d3
				.scaleBand()
				.rangeRound([0, calendarHeatmap.settings.width])
				.padding([0.05])
				.domain(
					r.map(function(a) {
						return a.year();
					})
				);
		calendarHeatmap.items.selectAll(".item-block-year").remove();
		calendarHeatmap.items
			.selectAll(".item-block-year")
			.data(e)
			.enter()
			.append("rect")
			.attr("class", "item item-block-year")
			.attr("width", function() {
				return (
					(calendarHeatmap.settings.width -
						calendarHeatmap.settings.label_padding) /
						r.length -
					5 * calendarHeatmap.settings.gutter
				);
			})
			.attr("height", function() {
				return (
					calendarHeatmap.settings.height -
					calendarHeatmap.settings.label_padding
				);
			})
			.attr("transform", function(a) {
				return (
					"translate(" +
					i(a.date.year()) +
					"," +
					2 * calendarHeatmap.settings.tooltip_padding +
					")"
				);
			})
			.attr("fill", function(a) {
				var t = d3
					.scaleLinear()
					.range(["#ffffff", calendarHeatmap.color || "#ff4500"])
					.domain([-0.15 * n, n]);
				return t(a.total) || "#ff4500";
			})
			.on("click", function(a) {
				calendarHeatmap.in_transition ||
					((calendarHeatmap.in_transition = !0),
					(calendarHeatmap.selected = a),
					calendarHeatmap.hideTooltip(),
					calendarHeatmap.removeGlobalOverview(),
					(calendarHeatmap.overview = "year"),
					calendarHeatmap.drawChart());
			})
			.style("opacity", 0)
			.on("mouseover", function(a) {
				if (!calendarHeatmap.in_transition) {
					var t = "";
					if (
						((t +=
							"<div><span><strong>Total workloads tracked:</strong></span>"),
						(t += "<span>" + a.total + "</span></div>"),
						(t += "<br />"),
						a.summary.length <= 5)
					)
						for (var e = 0; e < a.summary.length; e++)
							(t +=
								"<div><span><strong>" + a.summary[e].name + "</strong></span>"),
								(t += "<span>" + a.summary[e].value + "</span></div>");
					else {
						for (var e = 0; e < 5; e++)
							(t +=
								"<div><span><strong>" + a.summary[e].name + "</strong></span>"),
								(t += "<span>" + a.summary[e].value + "</span></div>");
						t += "<br />";
						for (var n = 0, e = 5; e < a.summary.length; e++)
							n = +a.summary[e].value;
						(t += "<div><span><strong>Other:</strong></span>"),
							(t += "<span>" + n + "</span></div>");
					}
					for (
						var r =
							i(a.date.year()) + 2 * calendarHeatmap.settings.tooltip_padding;
						calendarHeatmap.settings.width - r <
						calendarHeatmap.settings.tooltip_width +
							5 * calendarHeatmap.settings.tooltip_padding;

					)
						r -= 10;
					var l =
						this.getBoundingClientRect().top +
						calendarHeatmap.settings.tooltip_padding;
					calendarHeatmap.tooltip
						.html(t)
						.style("left", r + "px")
						.style("top", l + "px")
						.transition()
						.duration(calendarHeatmap.settings.transition_duration / 2)
						.ease(d3.easeLinear)
						.style("opacity", 1);
				}
			})
			.on("mouseout", function() {
				calendarHeatmap.in_transition || calendarHeatmap.hideTooltip();
			})
			.transition()
			.delay(function(a, t) {
				return (calendarHeatmap.settings.transition_duration * (t + 1)) / 10;
			})
			.duration(function() {
				return calendarHeatmap.settings.transition_duration;
			})
			.ease(d3.easeLinear)
			.style("opacity", 1)
			.call(
				function(a, t) {
					a.empty() && t();
					var e = 0;
					a.each(function() {
						++e;
					}).on("end", function() {
						--e || t.apply(this, arguments);
					});
				},
				function() {
					calendarHeatmap.in_transition = !1;
				}
			);
		calendarHeatmap.labels.selectAll(".label-year").remove(),
			calendarHeatmap.labels
				.selectAll(".label-year")
				.data(r)
				.enter()
				.append("text")
				.attr("class", "label label-year")
				.attr("font-size", function() {
					return Math.floor(calendarHeatmap.settings.label_padding / 3) + "px";
				})
				.text(function(a) {
					return a.year();
				})
				.attr("x", function(a) {
					return i(a.year());
				})
				.attr("y", calendarHeatmap.settings.label_padding / 2)
				.on("mouseenter", function(a) {
					calendarHeatmap.in_transition ||
						calendarHeatmap.items
							.selectAll(".item-block-year")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", function(t) {
								return moment(t.date).year() === a.year() ? 1 : 0.1;
							});
				})
				.on("mouseout", function() {
					calendarHeatmap.in_transition ||
						calendarHeatmap.items
							.selectAll(".item-block-year")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", 1);
				})
				.on("click", function(a) {
					calendarHeatmap.in_transition ||
						((calendarHeatmap.in_transition = !0),
						(calendarHeatmap.selected = { date: a }),
						calendarHeatmap.hideTooltip(),
						calendarHeatmap.removeGlobalOverview(),
						(calendarHeatmap.overview = "year"),
						calendarHeatmap.drawChart());
				});
	},
	drawYearOverview: function() {
		calendarHeatmap.history[calendarHeatmap.history.length - 1] !==
			calendarHeatmap.overview &&
			calendarHeatmap.history.push(calendarHeatmap.overview);
		var a = moment(calendarHeatmap.selected.date).startOf("year"),
			t = moment(calendarHeatmap.selected.date).endOf("year"),
			e = calendarHeatmap.data.filter(function(e) {
				return a <= moment(e.date) && moment(e.date) < t;
			}),
			n = d3.max(e, function(a) {
				return a.total;
			}),
			r = d3
				.scaleLinear()
				.range(["#ffffff", calendarHeatmap.color || "#ff4500"])
				.domain([-0.15 * n, n]),
			i = function(t) {
				var e = moment(t.date),
					n = Math.round((e - moment(a).startOf("week")) / 864e5),
					r = Math.trunc(n / 7);
				return (
					r *
						(calendarHeatmap.settings.item_size +
							calendarHeatmap.settings.gutter) +
					calendarHeatmap.settings.label_padding
				);
			},
			l = function(a) {
				return (
					calendarHeatmap.settings.label_padding +
					moment(a.date).weekday() *
						(calendarHeatmap.settings.item_size +
							calendarHeatmap.settings.gutter)
				);
			},
			d = function(a) {
				return n <= 0
					? calendarHeatmap.settings.item_size
					: 0.75 * calendarHeatmap.settings.item_size +
							((calendarHeatmap.settings.item_size * a.total) / n) * 0.25;
			};
		calendarHeatmap.items.selectAll(".item-circle").remove(),
			calendarHeatmap.items
				.selectAll(".item-circle")
				.data(e)
				.enter()
				.append("rect")
				.attr("class", "item item-circle")
				.style("opacity", 0)
				.attr("x", function(a) {
					return i(a) + (calendarHeatmap.settings.item_size - d(a)) / 2;
				})
				.attr("y", function(a) {
					return l(a) + (calendarHeatmap.settings.item_size - d(a)) / 2;
				})
				.attr("rx", function(a) {
					return d(a);
				})
				.attr("ry", function(a) {
					return d(a);
				})
				.attr("width", function(a) {
					return d(a);
				})
				.attr("height", function(a) {
					return d(a);
				})
				.attr("fill", function(a) {
					return a.total > 0 ? r(a.total) : "transparent";
				})
				.on("click", function(a) {})
				.on("mouseover", function(a) {
					if (!calendarHeatmap.in_transition) {
						var t = d3.select(this);
						!(function s() {
							t = t
								.transition()
								.duration(calendarHeatmap.settings.transition_duration)
								.ease(d3.easeLinear)
								.attr("x", function(a) {
									return (
										i(a) -
										(1.1 * calendarHeatmap.settings.item_size -
											calendarHeatmap.settings.item_size) /
											2
									);
								})
								.attr("y", function(a) {
									return (
										l(a) -
										(1.1 * calendarHeatmap.settings.item_size -
											calendarHeatmap.settings.item_size) /
											2
									);
								})
								.attr("width", 1.1 * calendarHeatmap.settings.item_size)
								.attr("height", 1.1 * calendarHeatmap.settings.item_size)
								.transition()
								.duration(calendarHeatmap.settings.transition_duration)
								.ease(d3.easeLinear)
								.attr("x", function(a) {
									return i(a) + (calendarHeatmap.settings.item_size - d(a)) / 2;
								})
								.attr("y", function(a) {
									return l(a) + (calendarHeatmap.settings.item_size - d(a)) / 2;
								})
								.attr("width", function(a) {
									return d(a);
								})
								.attr("height", function(a) {
									return d(a);
								})
								.on("end", s);
						})();
						var e = "";
						(e +=
							'<div class="header"><strong>' +
							(a.total ? a.total : "No time") +
							" tracked</strong></div>"),
							(e +=
								"<div>on " +
								moment(a.date).format("dddd, MMM Do YYYY") +
								"</div><br>");
						for (var n = 0; n < a.summary.length; n++)
							(e +=
								"<div><span><strong>" + a.summary[n].name + "</strong></span>"),
								(e += "<span>" + a.summary[n].value + "</span></div>");
						var r = i(a) + calendarHeatmap.settings.item_size;
						calendarHeatmap.settings.width - r <
							calendarHeatmap.settings.tooltip_width +
								3 * calendarHeatmap.settings.tooltip_padding &&
							(r -=
								calendarHeatmap.settings.tooltip_width +
								2 * calendarHeatmap.settings.tooltip_padding);
						var o =
							this.getBoundingClientRect().top +
							calendarHeatmap.settings.item_size;
						calendarHeatmap.tooltip
							.html(e)
							.style("left", r + "px")
							.style("top", o + (-180) + "px")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration / 2)
							.ease(d3.easeLinear)
							.style("opacity", 1);
					}
				})
				.on("mouseout", function() {
					calendarHeatmap.in_transition ||
						(d3
							.select(this)
							.transition()
							.duration(calendarHeatmap.settings.transition_duration / 2)
							.ease(d3.easeLinear)
							.attr("x", function(a) {
								return i(a) + (calendarHeatmap.settings.item_size - d(a)) / 2;
							})
							.attr("y", function(a) {
								return l(a) + (calendarHeatmap.settings.item_size - d(a)) / 2;
							})
							.attr("width", function(a) {
								return d(a);
							})
							.attr("height", function(a) {
								return d(a);
							}),
						calendarHeatmap.hideTooltip());
				})
				.transition()
				.delay(function() {
					return (
						(Math.cos(Math.PI * Math.random()) + 1) *
						calendarHeatmap.settings.transition_duration
					);
				})
				.duration(function() {
					return calendarHeatmap.settings.transition_duration;
				})
				.ease(d3.easeLinear)
				.style("opacity", 1)
				.call(
					function(a, t) {
						a.empty() && t();
						var e = 0;
						a.each(function() {
							++e;
						}).on("end", function() {
							--e || t.apply(this, arguments);
						});
					},
					function() {
						calendarHeatmap.in_transition = !1;
					}
				);
		var o = d3.timeMonths(a, t),
			s = d3
				.scaleLinear()
				.range([0, calendarHeatmap.settings.width])
				.domain([0, o.length]);
		calendarHeatmap.labels.selectAll(".label-month").remove(),
			calendarHeatmap.labels
				.selectAll(".label-month")
				.data(o)
				.enter()
				.append("text")
				.attr("class", "label label-month")
				.attr("font-size", function() {
					return Math.floor(calendarHeatmap.settings.label_padding / 3) + "px";
				})
				.text(function(a) {
					return a.toLocaleDateString("en-us", { month: "short" });
				})
				.attr("x", function(a, t) {
					return s(t) + (s(t) - s(t - 1)) / 2;
				})
				.attr("y", calendarHeatmap.settings.label_padding / 2)
				.on("mouseenter", function(a) {
					if (!calendarHeatmap.in_transition) {
						var t = moment(a);
						calendarHeatmap.items
							.selectAll(".item-circle")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", function(a) {
								return moment(a.date).isSame(t, "month") ? 1 : 0.1;
							});
					}
				})
				.on("mouseout", function() {
					calendarHeatmap.in_transition ||
						calendarHeatmap.items
							.selectAll(".item-circle")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", 1);
				})
				.on("click", function(a) {
					if (!calendarHeatmap.in_transition) {
						var t = calendarHeatmap.data.filter(function(t) {
							return (
								moment(a).startOf("month") <= moment(t.date) &&
								moment(t.date) < moment(a).endOf("month")
							);
						});
						t.length &&
							((calendarHeatmap.selected = { date: a }),
							(calendarHeatmap.in_transition = !0),
							calendarHeatmap.hideTooltip(),
							calendarHeatmap.removeYearOverview(),
							(calendarHeatmap.overview = "month"),
							calendarHeatmap.drawChart());
					}
				});
		var c = d3.timeDays(moment().startOf("week"), moment().endOf("week")),
			m = d3
				.scaleBand()
				.rangeRound([
					calendarHeatmap.settings.label_padding,
					calendarHeatmap.settings.height
				])
				.domain(
					c.map(function(a) {
						return moment(a).weekday();
					})
				);
		calendarHeatmap.labels.selectAll(".label-day").remove(),
			calendarHeatmap.labels
				.selectAll(".label-day")
				.data(c)
				.enter()
				.append("text")
				.attr("class", "label label-day")
				.attr("x", calendarHeatmap.settings.label_padding / 3)
				.attr("y", function(a, t) {
					return m(t) + m.bandwidth() / 1.75;
				})
				.style("text-anchor", "left")
				.attr("font-size", function() {
					return Math.floor(calendarHeatmap.settings.label_padding / 3) + "px";
				})
				.text(function(a) {
					return moment(a).format("dddd")[0];
				})
				.on("mouseenter", function(a) {
					if (!calendarHeatmap.in_transition) {
						var t = moment(a);
						calendarHeatmap.items
							.selectAll(".item-circle")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", function(a) {
								return moment(a.date).day() === t.day() ? 1 : 0.1;
							});
					}
				})
				.on("mouseout", function() {
					calendarHeatmap.in_transition ||
						calendarHeatmap.items
							.selectAll(".item-circle")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", 1);
				}),
			calendarHeatmap.drawButton();
	},
	drawMonthOverview: function() {
		calendarHeatmap.history[calendarHeatmap.history.length - 1] !==
			calendarHeatmap.overview &&
			calendarHeatmap.history.push(calendarHeatmap.overview);
		for (
			var a = moment(calendarHeatmap.selected.date).startOf("month"),
				t = moment(calendarHeatmap.selected.date).endOf("month"),
				e = calendarHeatmap.data.filter(function(e) {
					return a <= moment(e.date) && moment(e.date) < t;
				}),
				n = d3.max(e, function(a) {
					return d3.max(a.summary, function(a) {
						return a.value;
					});
				}),
				r = d3.timeDays(moment().startOf("week"), moment().endOf("week")),
				i = d3
					.scaleBand()
					.rangeRound([
						calendarHeatmap.settings.label_padding,
						calendarHeatmap.settings.height
					])
					.domain(
						r.map(function(a) {
							return moment(a).weekday();
						})
					),
				l = [a.clone()];
			a.week() !== t.week();

		)
			l.push(a.add(1, "week").clone());
		var d = d3
			.scaleBand()
			.rangeRound([
				calendarHeatmap.settings.label_padding,
				calendarHeatmap.settings.width
			])
			.padding([0.05])
			.domain(
				l.map(function(a) {
					return a.week();
				})
			);
		calendarHeatmap.items.selectAll(".item-block-month").remove();
		var o = calendarHeatmap.items
				.selectAll(".item-block-month")
				.data(e)
				.enter()
				.append("g")
				.attr("class", "item item-block-month")
				.attr("width", function() {
					return (
						(calendarHeatmap.settings.width -
							calendarHeatmap.settings.label_padding) /
							l.length -
						5 * calendarHeatmap.settings.gutter
					);
				})
				.attr("height", function() {
					return Math.min(
						i.bandwidth(),
						calendarHeatmap.settings.max_block_height
					);
				})
				.attr("transform", function(a) {
					return (
						"translate(" +
						d(moment(a.date).week()) +
						"," +
						(i(moment(a.date).weekday()) + i.bandwidth() / 1.75 - 15) +
						")"
					);
				})
				.attr("total", function(a) {
					return a.total;
				})
				.attr("date", function(a) {
					return a.date;
				})
				.attr("offset", 0)
				.on("click", function(a) {}),
			s =
				(calendarHeatmap.settings.width -
					calendarHeatmap.settings.label_padding) /
					l.length -
				5 * calendarHeatmap.settings.gutter,
			c = d3.scaleLinear().rangeRound([0, s]);
		o
			.selectAll(".item-block-rect")
			.data(function(a) {
				return a.summary;
			})
			.enter()
			.append("rect")
			.attr("class", "item item-block-rect")
			.attr("x", function(a) {
				var t = parseInt(d3.select(this.parentNode).attr("total")),
					e = parseInt(d3.select(this.parentNode).attr("offset"));
				return (
					c.domain([0, t]),
					d3.select(this.parentNode).attr("offset", e + c(a.value)),
					e
				);
			})
			.attr("width", function(a) {
				var t = parseInt(d3.select(this.parentNode).attr("total"));
				return (
					c.domain([0, t]),
					Math.max(c(a.value) - calendarHeatmap.settings.item_gutter, 1)
				);
			})
			.attr("height", function() {
				return Math.min(
					i.bandwidth(),
					calendarHeatmap.settings.max_block_height
				);
			})
			.attr("fill", function(a) {
				var t = d3
					.scaleLinear()
					.range(["#ffffff", calendarHeatmap.color || "#ff4500"])
					.domain([-0.15 * n, n]);
				return t(a.value) || "#ff4500";
			})
			.style("opacity", 0)
			.on("mouseover", function(a) {
				if (!calendarHeatmap.in_transition) {
					var t = new Date(d3.select(this.parentNode).attr("date")),
						e = "";
						(e +=
							"<div><strong>" +
							(a.value ? a.value : "No time") +
							" tracked</strong></div>"),
						(e +=
							"<div>on " + moment(t).format("dddd, MMM Do YYYY") + "</div><br>"),
					(e +=
						'<div class="header"><strong>' + a.name + "</strong></div><br>");
						
					for (
						var n =
							d(moment(t).week()) + calendarHeatmap.settings.tooltip_padding;
						calendarHeatmap.settings.width - n <
						calendarHeatmap.settings.tooltip_width +
							3 * calendarHeatmap.settings.tooltip_padding;

					)
						n -= 10;
					var r =
						this.getBoundingClientRect().top +
						calendarHeatmap.settings.tooltip_padding;
					calendarHeatmap.tooltip
						.html(e)
						.style("left", n + "px")
						.style("top", r + (-80) + "px")
						.transition()
						.duration(calendarHeatmap.settings.transition_duration / 2)
						.ease(d3.easeLinear)
						.style("opacity", 1);
				}
			})
			.on("mouseout", function() {
				calendarHeatmap.in_transition || calendarHeatmap.hideTooltip();
			})
			.transition()
			.delay(function() {
				return (
					(Math.cos(Math.PI * Math.random()) + 1) *
					calendarHeatmap.settings.transition_duration
				);
			})
			.duration(function() {
				return calendarHeatmap.settings.transition_duration;
			})
			.ease(d3.easeLinear)
			.style("opacity", 1)
			.call(
				function(a, t) {
					a.empty() && t();
					var e = 0;
					a.each(function() {
						++e;
					}).on("end", function() {
						--e || t.apply(this, arguments);
					});
				},
				function() {
					calendarHeatmap.in_transition = !1;
				}
			),
			calendarHeatmap.labels.selectAll(".label-week").remove(),
			calendarHeatmap.labels
				.selectAll(".label-week")
				.data(l)
				.enter()
				.append("text")
				.attr("class", "label label-week")
				.attr("font-size", function() {
					return Math.floor(calendarHeatmap.settings.label_padding / 3) + "px";
				})
				.text(function(a) {
					return "Week " + a.week();
				})
				.attr("x", function(a) {
					return d(a.week());
				})
				.attr("y", calendarHeatmap.settings.label_padding / 2)
				.on("mouseenter", function(a) {
					calendarHeatmap.in_transition ||
						calendarHeatmap.items
							.selectAll(".item-block-month")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", function(t) {
								return moment(t.date).week() === a.week() ? 1 : 0.1;
							});
				})
				.on("mouseout", function() {
					calendarHeatmap.in_transition ||
						calendarHeatmap.items
							.selectAll(".item-block-month")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", 1);
				})
				.on("click", function(a) {}),
			calendarHeatmap.labels.selectAll(".label-day").remove(),
			calendarHeatmap.labels
				.selectAll(".label-day")
				.data(r)
				.enter()
				.append("text")
				.attr("class", "label label-day")
				.attr("x", calendarHeatmap.settings.label_padding / 3)
				.attr("y", function(a, t) {
					return i(t) + i.bandwidth() / 1.75;
				})
				.style("text-anchor", "left")
				.attr("font-size", function() {
					return Math.floor(calendarHeatmap.settings.label_padding / 3) + "px";
				})
				.text(function(a) {
					return moment(a).format("dddd")[0];
				})
				.on("mouseenter", function(a) {
					if (!calendarHeatmap.in_transition) {
						var t = moment(a);
						calendarHeatmap.items
							.selectAll(".item-block-month")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", function(a) {
								return moment(a.date).day() === t.day() ? 1 : 0.1;
							});
					}
				})
				.on("mouseout", function() {
					calendarHeatmap.in_transition ||
						calendarHeatmap.items
							.selectAll(".item-block-month")
							.transition()
							.duration(calendarHeatmap.settings.transition_duration)
							.ease(d3.easeLinear)
							.style("opacity", 1);
				}),
			calendarHeatmap.drawButton();
	},
	drawButton: function() {
		calendarHeatmap.buttons.selectAll(".button").remove();
		var a = calendarHeatmap.buttons
			.append("g")
			.attr("class", "button button-back")
			.style("opacity", 0)
			.on("click", function() {
				calendarHeatmap.in_transition ||
					((calendarHeatmap.in_transition = !0),
					"year" === calendarHeatmap.overview
						? calendarHeatmap.removeYearOverview()
						: "month" === calendarHeatmap.overview &&
						  calendarHeatmap.removeMonthOverview(),
					calendarHeatmap.history.pop(),
					(calendarHeatmap.overview = calendarHeatmap.history.pop()),
					calendarHeatmap.drawChart());
			});
		a
			.append("circle")
			.attr("cx", calendarHeatmap.settings.label_padding / 2.25)
			.attr("cy", calendarHeatmap.settings.label_padding / 2.5)
			.attr("r", calendarHeatmap.settings.item_size / 2),
			a
				.append("text")
				.attr("x", calendarHeatmap.settings.label_padding / 2.25)
				.attr("y", calendarHeatmap.settings.label_padding / 2.5)
				.attr("dy", function() {
					return Math.floor(calendarHeatmap.settings.width / 100) / 3;
				})
				.attr("font-size", function() {
					return Math.floor(calendarHeatmap.settings.label_padding / 3) + "px";
				})
				.html("&#x2190;"),
			a
				.transition()
				.duration(calendarHeatmap.settings.transition_duration)
				.ease(d3.easeLinear)
				.style("opacity", 1);
	},
	removeGlobalOverview: function() {
		calendarHeatmap.items
			.selectAll(".item-block-year")
			.transition()
			.duration(calendarHeatmap.settings.transition_duration)
			.ease(d3.easeLinear)
			.style("opacity", 0)
			.remove(),
			calendarHeatmap.labels.selectAll(".label-year").remove();
	},
	removeYearOverview: function() {
		calendarHeatmap.items
			.selectAll(".item-circle")
			.transition()
			.duration(calendarHeatmap.settings.transition_duration)
			.ease(d3.easeLinear)
			.style("opacity", 0)
			.remove(),
			calendarHeatmap.labels.selectAll(".label-day").remove(),
			calendarHeatmap.labels.selectAll(".label-month").remove(),
			calendarHeatmap.hideBackButton();
	},
	removeMonthOverview: function() {
		calendarHeatmap.items
			.selectAll(".item-block-month")
			.selectAll(".item-block-rect")
			.transition()
			.duration(calendarHeatmap.settings.transition_duration)
			.ease(d3.easeLinear)
			.style("opacity", 0)
			.attr("x", function(a, t) {
				return t % 2 === 0
					? -calendarHeatmap.settings.width / 3
					: calendarHeatmap.settings.width / 3;
			})
			.remove(),
			calendarHeatmap.labels.selectAll(".label-day").remove(),
			calendarHeatmap.labels.selectAll(".label-week").remove(),
			calendarHeatmap.hideBackButton();
	},
	hideTooltip: function() {
		calendarHeatmap.tooltip
			.transition()
			.duration(calendarHeatmap.settings.transition_duration / 2)
			.ease(d3.easeLinear)
			.style("opacity", 0);
	},
	hideBackButton: function() {
		calendarHeatmap.buttons
			.selectAll(".button")
			.transition()
			.duration(calendarHeatmap.settings.transition_duration)
			.ease(d3.easeLinear)
			.style("opacity", 0)
			.remove();
	},
	formatTime: function(a) {
		var t = Math.floor(a / 3600),
			e = Math.floor((a - 3600 * t) / 60),
			n = "";
		return (
			t > 0 && (n += 1 === t ? "1 hour " : t + " hours "),
			e > 0 && (n += 1 === e ? "1 minute" : e + " minutes"),
			0 === t && 0 === e && (n = Math.round(a) + " seconds"),
			n
		);
	}
};
