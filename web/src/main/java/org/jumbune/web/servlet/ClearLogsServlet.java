package org.jumbune.web.servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jumbune.common.beans.LogConsolidationInfo;
import org.jumbune.common.utils.RemoteFileUtil;


import com.google.gson.Gson;


/**
 * Servlet class to clear logs,log analysis report,uninstrumented Jar statistics
 * generated by previous executions.
 * 
 * 
 */

@SuppressWarnings("serial")
public class ClearLogsServlet extends HttpServlet {
	
	/** The Constant LOGGER. */
	private static final Logger LOGGER = LogManager
			.getLogger(ClearLogsServlet.class);

	/**
	 * process the request.
	 *
	 * @param request the request
	 * @param response the response
	 */
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) {

		processRequest(response);
	}

	/**
	 * process the request.
	 *
	 * @param request the request
	 * @param response the response
	 */
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) {

		processRequest(response);
	}

	/**
	 * It deletes the frameworklogs directory which stores all the log files
	 * from master and other nodes, log analysis result,profiling result,and
	 * Uninstrumented Jar statistics.
	 *
	 * @param response the response
	 */
	private void processRequest(HttpServletResponse response) {
		
		final Map<String, Object> data = new HashMap<String, Object>();
		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		PrintWriter out = null;
		Gson gson = new Gson();

		try {
			out = response.getWriter();

			final String logLocationJson = org.jumbune.common.utils.JobConfigUtil.getServiceJsonPath();
			LogConsolidationInfo logCollection = gson.fromJson(logLocationJson, LogConsolidationInfo.class);
			RemoteFileUtil remoteFileUtil = new RemoteFileUtil();
			remoteFileUtil.clearAllLogFiles(logCollection);
			data.put("success", true);
		} catch (IOException e) {
			data.put("success", false);
			data.put("message", e.getMessage());
			LOGGER.error("IOException occured while clearing logs");
		}catch (Exception e) {
			data.put("success", false);
			data.put("message", e.getMessage());
			LOGGER.error("exception occured while clearing logs");
		} finally {
			final String jsonString = new Gson().toJson(data);
			out.println(jsonString);
			out.close();

		}
	}

}
