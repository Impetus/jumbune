package org.jumbune.web.services;



import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.GenericEntity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jumbune.web.utils.WebConstants;


/**
 * Service class to clear log files,log analysis report,uninstrumented Jar statistics
 * generated by previous executions.
 * 
 * 
 */

@Path(WebConstants.CLEAR_LOGS_SERVICE_URL)
public class ClearLogsService{
	
	/** The Constant LOGGER. */
	private static final Logger LOGGER = LogManager
			.getLogger(ClearLogsService.class);

	public static final String SUCCESS = "success";
	
	public static final String MESSAGE = "message";
	
	@Context
	HttpServletRequest request;
	
	@Context
	HttpServletResponse response;
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	public Response processRequestOnPost() {
	    GenericEntity<Map<String, Object>> entity = new GenericEntity<Map<String, Object>>(processRequest(response)){};
		return Response.ok(entity).build();
	}

	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response processRequestOnGet() {
	    GenericEntity<Map<String, Object>> entity = new GenericEntity<Map<String, Object>>(processRequest(response)){};
		return Response.ok(entity).build();
	}

	/**
	 * It deletes the frameworklogs directory which stores all the log files
	 * from master and other nodes, log analysis result,profiling result,and
	 * Uninstrumented Jar statistics.
	 *
	 * @param response the response
	 */
	private Map<String, Object> processRequest(HttpServletResponse response) {

		final Map<String, Object> data = new HashMap<String, Object>();
		try {
			final String logLocationJson = org.jumbune.common.utils.JobConfigUtil.getServiceJsonPath();
			data.put(SUCCESS, true);
		} catch (Exception e) {
			data.put(SUCCESS, false);
			data.put(MESSAGE, e.getMessage());
			LOGGER.error("exception occured while clearing logs");
		} 		
		return data;
	}

}
